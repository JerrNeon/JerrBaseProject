package com.cw.jerrbase.db.greendaogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cw.jerrbase.bean.MarketMainModelVO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARKET_MAIN_MODEL".
*/
public class MarketMainModelDao extends AbstractDao<MarketMainModelVO, Long> {

    public static final String TABLENAME = "MARKET_MAIN_MODEL";

    /**
     * Properties of entity MarketMainModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Img = new Property(2, String.class, "img", false, "IMG");
        public final static Property Color1 = new Property(3, String.class, "color1", false, "COLOR1");
        public final static Property Color2 = new Property(4, String.class, "color2", false, "COLOR2");
        public final static Property Specifications = new Property(5, String.class, "specifications", false, "SPECIFICATIONS");
        public final static Property Starlevelname = new Property(6, String.class, "starlevelname", false, "STARLEVELNAME");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property Time = new Property(8, long.class, "time", false, "TIME");
        public final static Property Price = new Property(9, String.class, "price", false, "PRICE");
        public final static Property Guideprice1 = new Property(10, String.class, "guideprice1", false, "GUIDEPRICE1");
        public final static Property Guideprice2 = new Property(11, String.class, "guideprice2", false, "GUIDEPRICE2");
        public final static Property Adprice = new Property(12, String.class, "adprice", false, "ADPRICE");
        public final static Property Cardiscount = new Property(13, String.class, "cardiscount", false, "CARDISCOUNT");
        public final static Property Carstatus = new Property(14, String.class, "carstatus", false, "CARSTATUS");
        public final static Property Addressfrom = new Property(15, String.class, "addressfrom", false, "ADDRESSFROM");
        public final static Property Addressto = new Property(16, String.class, "addressto", false, "ADDRESSTO");
        public final static Property Type = new Property(17, String.class, "type", false, "TYPE");
        public final static Property Licensearea = new Property(18, String.class, "licensearea", false, "LICENSEAREA");
        public final static Property Customcar = new Property(19, String.class, "customcar", false, "CUSTOMCAR");
        public final static Property Feerule = new Property(20, String.class, "feerule", false, "FEERULE");
        public final static Property Feevalue = new Property(21, String.class, "feevalue", false, "FEEVALUE");
    }


    public MarketMainModelDao(DaoConfig config) {
        super(config);
    }
    
    public MarketMainModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARKET_MAIN_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IMG\" TEXT," + // 2: img
                "\"COLOR1\" TEXT," + // 3: color1
                "\"COLOR2\" TEXT," + // 4: color2
                "\"SPECIFICATIONS\" TEXT," + // 5: specifications
                "\"STARLEVELNAME\" TEXT," + // 6: starlevelname
                "\"REMARK\" TEXT," + // 7: remark
                "\"TIME\" INTEGER NOT NULL ," + // 8: time
                "\"PRICE\" TEXT," + // 9: price
                "\"GUIDEPRICE1\" TEXT," + // 10: guideprice1
                "\"GUIDEPRICE2\" TEXT," + // 11: guideprice2
                "\"ADPRICE\" TEXT," + // 12: adprice
                "\"CARDISCOUNT\" TEXT," + // 13: cardiscount
                "\"CARSTATUS\" TEXT," + // 14: carstatus
                "\"ADDRESSFROM\" TEXT," + // 15: addressfrom
                "\"ADDRESSTO\" TEXT," + // 16: addressto
                "\"TYPE\" TEXT," + // 17: type
                "\"LICENSEAREA\" TEXT," + // 18: licensearea
                "\"CUSTOMCAR\" TEXT," + // 19: customcar
                "\"FEERULE\" TEXT," + // 20: feerule
                "\"FEEVALUE\" TEXT);"); // 21: feevalue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARKET_MAIN_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MarketMainModelVO entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
 
        String color1 = entity.getColor1();
        if (color1 != null) {
            stmt.bindString(4, color1);
        }
 
        String color2 = entity.getColor2();
        if (color2 != null) {
            stmt.bindString(5, color2);
        }
 
        String specifications = entity.getSpecifications();
        if (specifications != null) {
            stmt.bindString(6, specifications);
        }
 
        String starlevelname = entity.getStarlevelname();
        if (starlevelname != null) {
            stmt.bindString(7, starlevelname);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
        stmt.bindLong(9, entity.getTime());
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(10, price);
        }
 
        String guideprice1 = entity.getGuideprice1();
        if (guideprice1 != null) {
            stmt.bindString(11, guideprice1);
        }
 
        String guideprice2 = entity.getGuideprice2();
        if (guideprice2 != null) {
            stmt.bindString(12, guideprice2);
        }
 
        String adprice = entity.getAdprice();
        if (adprice != null) {
            stmt.bindString(13, adprice);
        }
 
        String cardiscount = entity.getCardiscount();
        if (cardiscount != null) {
            stmt.bindString(14, cardiscount);
        }
 
        String carstatus = entity.getCarstatus();
        if (carstatus != null) {
            stmt.bindString(15, carstatus);
        }
 
        String addressfrom = entity.getAddressfrom();
        if (addressfrom != null) {
            stmt.bindString(16, addressfrom);
        }
 
        String addressto = entity.getAddressto();
        if (addressto != null) {
            stmt.bindString(17, addressto);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(18, type);
        }
 
        String licensearea = entity.getLicensearea();
        if (licensearea != null) {
            stmt.bindString(19, licensearea);
        }
 
        String customcar = entity.getCustomcar();
        if (customcar != null) {
            stmt.bindString(20, customcar);
        }
 
        String feerule = entity.getFeerule();
        if (feerule != null) {
            stmt.bindString(21, feerule);
        }
 
        String feevalue = entity.getFeevalue();
        if (feevalue != null) {
            stmt.bindString(22, feevalue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MarketMainModelVO entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
 
        String color1 = entity.getColor1();
        if (color1 != null) {
            stmt.bindString(4, color1);
        }
 
        String color2 = entity.getColor2();
        if (color2 != null) {
            stmt.bindString(5, color2);
        }
 
        String specifications = entity.getSpecifications();
        if (specifications != null) {
            stmt.bindString(6, specifications);
        }
 
        String starlevelname = entity.getStarlevelname();
        if (starlevelname != null) {
            stmt.bindString(7, starlevelname);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
        stmt.bindLong(9, entity.getTime());
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(10, price);
        }
 
        String guideprice1 = entity.getGuideprice1();
        if (guideprice1 != null) {
            stmt.bindString(11, guideprice1);
        }
 
        String guideprice2 = entity.getGuideprice2();
        if (guideprice2 != null) {
            stmt.bindString(12, guideprice2);
        }
 
        String adprice = entity.getAdprice();
        if (adprice != null) {
            stmt.bindString(13, adprice);
        }
 
        String cardiscount = entity.getCardiscount();
        if (cardiscount != null) {
            stmt.bindString(14, cardiscount);
        }
 
        String carstatus = entity.getCarstatus();
        if (carstatus != null) {
            stmt.bindString(15, carstatus);
        }
 
        String addressfrom = entity.getAddressfrom();
        if (addressfrom != null) {
            stmt.bindString(16, addressfrom);
        }
 
        String addressto = entity.getAddressto();
        if (addressto != null) {
            stmt.bindString(17, addressto);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(18, type);
        }
 
        String licensearea = entity.getLicensearea();
        if (licensearea != null) {
            stmt.bindString(19, licensearea);
        }
 
        String customcar = entity.getCustomcar();
        if (customcar != null) {
            stmt.bindString(20, customcar);
        }
 
        String feerule = entity.getFeerule();
        if (feerule != null) {
            stmt.bindString(21, feerule);
        }
 
        String feevalue = entity.getFeevalue();
        if (feevalue != null) {
            stmt.bindString(22, feevalue);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MarketMainModelVO readEntity(Cursor cursor, int offset) {
        MarketMainModelVO entity = new MarketMainModelVO( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // img
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // color1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // color2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // specifications
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // starlevelname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.getLong(offset + 8), // time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // price
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // guideprice1
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // guideprice2
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // adprice
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // cardiscount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // carstatus
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // addressfrom
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // addressto
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // type
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // licensearea
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // customcar
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // feerule
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // feevalue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MarketMainModelVO entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setColor1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setColor2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSpecifications(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStarlevelname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.getLong(offset + 8));
        entity.setPrice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGuideprice1(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGuideprice2(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAdprice(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCardiscount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCarstatus(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAddressfrom(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAddressto(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLicensearea(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCustomcar(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFeerule(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFeevalue(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MarketMainModelVO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MarketMainModelVO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MarketMainModelVO entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
